function  mysave (fn, varargin)%MYSAVE Save workspace variables to disk in documented format.%%   John S. Stroud, Ph.D.%   CSS Code R21%   x4540%   07 May 2003 %   save has some default behaviors that I'm not certain that%   I'm going to emulate%       SAVE - saves all workspace variables to matlab.mat%       SAVE FILENAME - saves all workspace variables to FILENAME.matif ~exist('fn','var')    fn = default('name');enderrsource = 'mymat:mysave';storeflat = evalin('caller', 'exist(''storeflat'',''var'')');if storeflat    storeflat = evalin('caller','storeflat');enddfn = 'uint8';[path, name, ext] = fileparts(fn);if isempty(ext)    ext = default('ext');endfn = fullfile(path, [name ext]);n = nargin - 1;if n < 1     s = evalin('caller','who');else    s = cell(n,1);    for index = [1 : n]        s{index} = varargin{index};    endendif isempty(s)    warning('Nothing to save, exiting');    returnendfid = fopen(fn, 'w+b', default('format'));if fid == -1    error([errsource ':fopen'], 'Could not open file "%s" for writing', fn);endh = header(fid, 'write');for index = 1:length(s)    varname = s{index};    varinfo = evalin('caller', ['whos(''' varname ''')']);    varval = evalin('caller', varname);    % isglobal must be determined at this level    varinfo.global = evalin('caller', ['isglobal(' varname ')']);        handlevar(fid, varinfo, varname, varval, dfn, storeflat); endfclose(fid);function handlevar(fid, varinfo, varname, varval, dfn, storeflat)switch varinfo.class    case {'double','char','single'}        its = varinfo ;        its.real = isreal(varname);        varval = transpose(varval);        its.realval = real(varval(:));        if its.real            its.imagval = [];        else            its.imagval = imag(varval(:));        end                % skip the location        keep = location(fid, 'skip');        status = putvar(its, fid, dfn);        location (fid, 'put', keep);    case 'struct'        fn = fieldnames(varval);        for index = 1:length(fn)            drilldown(fid, varinfo.name, varinfo, ...                varname, varval, ...                fn{index}, ['.(''' fn{index} ''')'],...                dfn, storeflat);        end    otherwise        error([errsource ':VarInfoClass'], 'an unhandled class was encountered');endfunction drilldown(fid, apath, varinfo, varname, ...    varval, fn, fnpath, dfn, storeflat)lcvar = eval(['varval', fnpath]);if isstruct(lcvar)    morefields = fieldnames(lcvar);    for index = 1:length(morefields)        drilldown(fid, [apath '.' fn], ...            varinfo, varname, varval, ...            morefields{index}, ...            [fnpath '.(''' morefields{index} ''')'], ...            dfn);    endelse    its=varinfo;    if ~storeflat        its.name = [apath '.' fn];    else        its.name = fn;    end    its.real = isreal(lcvar);    its.size = size(lcvar);    lcvar = transpose(lcvar);    its.realval = real(lcvar(:));    its.class = class(lcvar);    if its.real        its.imagval = [];    else        its.imagval = imag(lcvar(:));    end        % skip the location    keep = location(fid, 'skip');    status = putvar(its, fid, dfn);    location (fid, 'put', keep);    endreturnfunction status = putvar(its, fid, dfn) % its is a struct with fields%  name    : char array%  size    : array of sizes%  real    : flag from isreal(a)%  global  : flag from isglobal(a)%  realval : array from real(a(:))%  imagval : array from imag(a(:))% fid points to an open writable file% dfn is the default format number ('uint8' most likely)status = fwrite(fid, length (its.name), dfn);las = length(its.size);status = status + fwrite(fid, las, dfn);status = status + fwrite(fid, its.real, dfn);  status = status + fwrite(fid, its.global, dfn);[code, ofn]= translate('class', its.class);status = status + fwrite(fid, code, dfn);status = status + fwrite(fid, its.name, 'char');status = status + fwrite(fid, its.size(:), 'uint32');status = status + fwrite(fid, its.realval, ofn);if ~its.real    status = status + fwrite (fid, its.imagval, ofn);endreturn